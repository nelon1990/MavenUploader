buildscript {
    repositories {
        mavenCentral()
    }
}

apply from: "init.gradle"
apply plugin: UploadPlugin


uploaderConfig {
    artifact = "repoUploader"
    group = "pers.nelon.uploader"
    version = "1.0.0"
    repositoryUrl = "http://192.168.1.12:8088/repository/ppfuns-release/"
    userName = "libingfeng"
    password = "123"
    ext {
        description = "这是一个描述"
    }
}

class UploadPlugin implements Plugin<Project> {
    private static final String MAVEN_CONFIG_TASK_NAME = "configMaven"

    @Override
    void apply(Project target) {
        configMaven(target)
    }

    void configMaven(Project pProject) {
        if (!pProject.plugins.hasPlugin("maven")) {
            pProject.apply plugin: "maven"
        }

        pProject.extensions.create("uploaderConfig", UploaderExtension.class)

        pProject.uploaderConfig {
            artifact = pProject.name
            group = pProject.group
            version = pProject.version
            repositoryUrl = ""
            userName = ""
            password = ""
        }

        pProject.project.getTasks().create(MAVEN_CONFIG_TASK_NAME, MavenConfigTask)

        pProject.tasks.findByName("uploadArchives").dependsOn MAVEN_CONFIG_TASK_NAME

        pProject.project.getTasks().create("uploadToRepo", UploadExecutor) {
            doLast {
                println "------------------------------UPLOAD COMPLETED------------------------------"
            }
        }.dependsOn "uploadArchives"
    }

}

class MavenConfigTask extends DefaultTask {
    MavenConfigTask() {
        doLast {
            applyConfig()
        }
    }

    void applyConfig() {
        def uploadArchives = project.tasks.findByName("uploadArchives")
        uploadArchives.repositories {
            mavenDeployer {
                repository(url: project.uploaderConfig.repositoryUrl) {
                    authentication(userName: project.uploaderConfig.userName, password: project.uploaderConfig.password)
                }
                pom { p ->
                    p.version = project.uploaderConfig.version
                    p.groupId = project.uploaderConfig.group
                    p.artifactId = project.uploaderConfig.artifact

                    Map<String, String> map = project.uploaderConfig.extMap
                    Set<String> keySet = map.keySet()
                    keySet.each { key ->
                        p.withXml {
                            asNode().appendNode(key, map.get(key))
                        }
                    }

                }

                println "------------------------------MAVEN POM START------------------------------"
                println "artifact :\t\t ${project.uploaderConfig.artifact}"
                println "group :\t\t ${project.uploaderConfig.group}"
                println "version :\t\t ${project.uploaderConfig.version}"
                println "repositoryUrl :\t\t ${project.uploaderConfig.repositoryUrl}"
                println "userName :\t\t ${project.uploaderConfig.userName}"
                println "password :\t\t ${project.uploaderConfig.password}"
                println "ext :"
                Map<String, String> map = project.uploaderConfig.extMap
                Set<String> keySet = map.keySet()
                keySet.each { key ->
                    println "\t${key} : ${map.get(key)}"
                }
                println "-------------------------------MAVEN POM END-------------------------------"
            }
        }
    }

}

class UploaderExtension {
    String artifact
    String group
    String version
    String repositoryUrl
    String userName
    String password
    Map<String, String> extMap

    UploaderExtension() {
        artifact = ""
        group = ""
        version = ""
        repositoryUrl = ""
        userName = ""
        password = ""
        extMap = new HashMap<>()
    }

    void ext(Action<Map> pMapAction) {
        pMapAction.execute(extMap)
    }
}

class UploadExecutor extends DefaultTask {
}